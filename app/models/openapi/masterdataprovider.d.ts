/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v2/HealthCheck": {
    get: {
      parameters: {
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/v2/Search": {
    get: {
      parameters: {
        query: {
          /** A single word to find. Will match partial values. */
          key?: string;
          /**
           * Optional. Can be used to limit the search to one specific area.
           *             Should be one of
           *             All = 0
           *             Server = 1
           *             Shop = 2
           *             Site = 3
           */
          path?: components["schemas"]["SearchPath"];
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/v2/Servers/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/v2/Servers": {
    get: {
      parameters: {
        query: {
          /** The servers unique id. */
          id?: number;
          /** Logical name of the server, ex: 'webcl04n04.azure.local'. */
          logicalName?: string;
          /** The id of the server role. */
          role?: components["schemas"]["ServerRole"];
          /** Returns all Servers where Description, HostingEnvironment, IpAddress, LogicalName or PhysicalName contains part of this searchKey. */
          searchKey?: string;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/v2/Servers/AddServer": {
    put: {
      parameters: {
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
      /** Server object, all inclusive. */
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["Server"];
          "application/json": components["schemas"]["Server"];
          "text/json": components["schemas"]["Server"];
          "application/*+json": components["schemas"]["Server"];
        };
      };
    };
  };
  "/v2/Servers/UpdateServer": {
    put: {
      parameters: {
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["Server"];
          "application/json": components["schemas"]["Server"];
          "text/json": components["schemas"]["Server"];
          "application/*+json": components["schemas"]["Server"];
        };
      };
    };
  };
  "/v2/Servers/DeleteServer": {
    put: {
      parameters: {
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["Server"];
          "application/json": components["schemas"]["Server"];
          "text/json": components["schemas"]["Server"];
          "application/*+json": components["schemas"]["Server"];
        };
      };
    };
  };
  "/v2/Servers/GetServersByServerRole": {
    get: {
      parameters: {
        query: {
          serverRole?: components["schemas"]["ServerRole"];
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/v2/Servers/GetServersInGroup/{serverGroup}": {
    get: {
      parameters: {
        path: {
          serverGroup: string;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/v2/Servers/GetServersInSameGroup/{physicalName}": {
    get: {
      parameters: {
        path: {
          physicalName: string;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/v2/Shops/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          id: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
      /** Shop object with new values. (null values will be ignored) */
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["Shop"];
          "application/json": components["schemas"]["Shop"];
          "text/json": components["schemas"]["Shop"];
          "application/*+json": components["schemas"]["Shop"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** Id of the shop to delete. */
          id: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/v2/Shops": {
    get: {
      parameters: {
        query: {
          /** Identifier of the shop. Db primary key. */
          id?: number;
          /** Unique given ShopId. */
          shopId?: string;
          /** Returns all Shops where ShopId, Name, InternalHostHeader, DBName, DB LogicalName, DBUser or Version contains this searchKey. */
          searchKey?: string;
          /**
           * Returns all Shops that match the key/value combinations. Any model property can be filtered.
           *             Syntax should be [key1] = [value1] with any additional key/value pairs separated by "AND" ([key1] = [value1] AND [key2] = [value2]).
           */
          query?: string;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
    put: {
      parameters: {
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
      /** The shop to save */
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["Shop"];
          "application/json": components["schemas"]["Shop"];
          "text/json": components["schemas"]["Shop"];
          "application/*+json": components["schemas"]["Shop"];
        };
      };
    };
    post: {
      parameters: {
        query: {
          /** Unique Id of the shop. Same as db primary key. */
          id?: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
      /** Shop object with new values. (null values will be ignored) */
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["Shop"];
          "application/json": components["schemas"]["Shop"];
          "text/json": components["schemas"]["Shop"];
          "application/*+json": components["schemas"]["Shop"];
        };
      };
    };
    delete: {
      parameters: {
        query: {
          /** Id of the shop to delete. */
          id?: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/v2/ShopSettings/current": {
    get: {
      parameters: {
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Setting"][];
            "application/json": components["schemas"]["Setting"][];
            "text/json": components["schemas"]["Setting"][];
          };
        };
        /** Client Error */
        422: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/v2/ShopSettings/current/settings": {
    get: {
      parameters: {
        query: {
          /** Setting names, separated by ; */
          names?: string;
          marketId?: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Setting"][];
            "application/json": components["schemas"]["Setting"][];
            "text/json": components["schemas"]["Setting"][];
          };
        };
        /** Client Error */
        422: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
    put: {
      parameters: {
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Setting"][];
            "application/json": components["schemas"]["Setting"][];
            "text/json": components["schemas"]["Setting"][];
          };
        };
        /** Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** Client Error */
        422: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["Setting"];
          "application/json": components["schemas"]["Setting"];
          "text/json": components["schemas"]["Setting"];
          "application/*+json": components["schemas"]["Setting"];
        };
      };
    };
    post: {
      parameters: {
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Setting"][];
            "application/json": components["schemas"]["Setting"][];
            "text/json": components["schemas"]["Setting"][];
          };
        };
        /** Client Error */
        422: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["Setting"];
          "application/json": components["schemas"]["Setting"];
          "text/json": components["schemas"]["Setting"];
          "application/*+json": components["schemas"]["Setting"];
        };
      };
    };
  };
  "/v2/ShopSettings/current/settings/{name}": {
    get: {
      parameters: {
        path: {
          name: string;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Setting"][];
            "application/json": components["schemas"]["Setting"][];
            "text/json": components["schemas"]["Setting"][];
          };
        };
        /** Client Error */
        422: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          name: string;
        };
        query: {
          marketId?: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Setting"][];
            "application/json": components["schemas"]["Setting"][];
            "text/json": components["schemas"]["Setting"][];
          };
        };
        /** Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** Client Error */
        422: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
      requestBody: {
        content: {
          "application/json-patch+json": string;
          "application/json": string;
          "text/json": string;
          "application/*+json": string;
        };
      };
    };
  };
  "/v2/ShopSettings/{shopId}": {
    get: {
      parameters: {
        path: {
          shopId: string;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Setting"][];
            "application/json": components["schemas"]["Setting"][];
            "text/json": components["schemas"]["Setting"][];
          };
        };
        /** Client Error */
        422: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/v2/ShopSettings/{shopId}/settings": {
    get: {
      parameters: {
        path: {
          shopId: string;
        };
        query: {
          names?: string;
          marketId?: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Setting"][];
            "application/json": components["schemas"]["Setting"][];
            "text/json": components["schemas"]["Setting"][];
          };
        };
        /** Client Error */
        422: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          shopId: string;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Setting"][];
            "application/json": components["schemas"]["Setting"][];
            "text/json": components["schemas"]["Setting"][];
          };
        };
        /** Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** Client Error */
        422: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["Setting"];
          "application/json": components["schemas"]["Setting"];
          "text/json": components["schemas"]["Setting"];
          "application/*+json": components["schemas"]["Setting"];
        };
      };
    };
    post: {
      parameters: {
        path: {
          shopId: string;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Setting"][];
            "application/json": components["schemas"]["Setting"][];
            "text/json": components["schemas"]["Setting"][];
          };
        };
        /** Client Error */
        422: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["Setting"];
          "application/json": components["schemas"]["Setting"];
          "text/json": components["schemas"]["Setting"];
          "application/*+json": components["schemas"]["Setting"];
        };
      };
    };
  };
  "/v2/ShopSettings/{shopId}/settings/{name}": {
    get: {
      parameters: {
        path: {
          shopId: string;
          name: string;
        };
        query: {
          marketId?: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Setting"][];
            "application/json": components["schemas"]["Setting"][];
            "text/json": components["schemas"]["Setting"][];
          };
        };
        /** Client Error */
        422: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          shopId: string;
          name: string;
        };
        query: {
          marketId?: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Setting"][];
            "application/json": components["schemas"]["Setting"][];
            "text/json": components["schemas"]["Setting"][];
          };
        };
        /** Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** Client Error */
        422: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
      requestBody: {
        content: {
          "application/json-patch+json": string;
          "application/json": string;
          "text/json": string;
          "application/*+json": string;
        };
      };
    };
  };
  "/v2/Sites/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique id of the site. Same as db primary key. */
          id: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": boolean;
            "application/json": boolean;
            "text/json": boolean;
          };
        };
      };
      /** Site object with new values to update */
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["Site"];
          "application/json": components["schemas"]["Site"];
          "text/json": components["schemas"]["Site"];
          "application/*+json": components["schemas"]["Site"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** Id of the site to delete. */
          id: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": boolean;
            "application/json": boolean;
            "text/json": boolean;
          };
        };
      };
    };
  };
  "/v2/Sites": {
    get: {
      parameters: {
        query: {
          /** Unique id of the record. Same as db primary key. */
          id?: number;
          /** Id for IIS. If this is supplied, webServer must also be supplied. Returns 0..1 Sites. */
          iisId?: number;
          /** Site name. If this is supplied, webServer must also be supplied. Returns 0..1 Sites. */
          name?: string;
          /** Name of webserver where sites should be installed. If this is supplied, IIS Id must also be supplied. Returns 0..1 Sites. */
          webServer?: string;
          /** If ShopId is supplied, all sites for this shop is returned. If either iisId or webServer are supplied, ShopId will be ignored. */
          shopId?: string;
          /** Returns all Sites where SiteName, Server, ShopId, AppPoolName, Binding host, Binding address or Binding protocol contains this searchKey. */
          searchKey?: string;
          /**
           * Returns all Sites that match the key/value combinations. Any model property can be filtered, including bindings. To query a binding property, prefix the
           *             property name with "bindings.", ex: bindings.host = testshop1.jetshop.se.
           *             Syntax should be [key1] = [value1] with any additional key/value pairs separated by "AND" ([key1] = [value1] AND [key2] = [value2]).
           *             Ex: webserver = jetweb806.jetshop.se AND bindings.protocol = https.
           */
          query?: string;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
    put: {
      parameters: {
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
      /** The site to add */
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["Site"];
          "application/json": components["schemas"]["Site"];
          "text/json": components["schemas"]["Site"];
          "application/*+json": components["schemas"]["Site"];
        };
      };
    };
    post: {
      parameters: {
        query: {
          /** Unique id of the site. Same as db primary key. */
          id?: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": boolean;
            "application/json": boolean;
            "text/json": boolean;
          };
        };
      };
      /** Site object with new values to update */
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["Site"];
          "application/json": components["schemas"]["Site"];
          "text/json": components["schemas"]["Site"];
          "application/*+json": components["schemas"]["Site"];
        };
      };
    };
    delete: {
      parameters: {
        query: {
          /** Id of the site. (Note that this is not the same as IIS Id) */
          id?: number;
        };
        header: {
          /** Correlation ID */
          "x-correlationid": string;
          /** Shop ID */
          "x-shopid": string;
          /** {ServiceName}/{Version} (+Jetshop) */
          "user-agent": string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": boolean;
            "application/json": boolean;
            "text/json": boolean;
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    EntityRef: {
      /** Format: int64 */
      id?: number;
      key?: string | null;
    };
    /**
     * Format: int32
     * @description 10 = Pin, <br>20 = Itg, <br>30 = Bsf, <br>40 = Amz, <br>50 = Can, <br>60 = Azure
     * @enum {integer}
     */
    HostingEnvironment: 10 | 20 | 30 | 40 | 50 | 60;
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
    } & { [key: string]: unknown };
    /**
     * Format: int32
     * @description 0 = All, <br>1 = Site, <br>2 = Shop, <br>3 = Server
     * @enum {integer}
     */
    SearchPath: 0 | 1 | 2 | 3;
    Server: {
      /** Format: int64 */
      id?: number;
      logicalName?: string | null;
      physicalName?: string | null;
      ipAddress?: string | null;
      hostingEnvironment?: components["schemas"]["HostingEnvironment"];
      serverRole?: components["schemas"]["ServerRole"];
      description?: string | null;
      inProduction?: boolean;
      serverGroup?: string | null;
      externalIpAddress?: string | null;
      isElastic?: boolean;
      lbGroup?: string | null;
    };
    /**
     * Format: int32
     * @description 1 = ShopsWeb, <br>2 = ShopsDb, <br>3 = ServicesWeb, <br>4 = ServicesDb, <br>5 = Other, <br>6 = LoadBalancer
     * @enum {integer}
     */
    ServerRole: 1 | 2 | 3 | 4 | 5 | 6;
    Setting: {
      /** Format: int64 */
      id?: number;
      name?: string | null;
      category?: string | null;
      type?: string | null;
      data?: string | null;
      /** Format: int32 */
      accessLevel?: number;
      visible?: boolean;
      isLocalized?: boolean;
      /** Format: int32 */
      cacheTime?: number;
      /** Format: int32 */
      settingType?: number;
      description?: string | null;
      /** Format: int64 */
      settingId?: number;
      /** Format: int32 */
      marketId?: number | null;
    };
    Shop: {
      /** Format: int64 */
      id?: number;
      shopId?: string | null;
      name?: string | null;
      internalHostHeader?: string | null;
      defaultHostHeader?: string | null;
      comments?: string | null;
      dbServer?: components["schemas"]["EntityRef"];
      dbName?: string | null;
      dbUserId?: string | null;
      dbPassword?: string | null;
      /** Format: date-time */
      creationDate?: string | null;
      version?: string | null;
      status?: components["schemas"]["ShopStatus"];
      type?: components["schemas"]["ShopType"];
      edition?: components["schemas"]["ShopEdition"];
      invoiceTraffic?: boolean;
      jetshopVersion?: string | null;
      isElastic?: boolean;
      isFlight?: boolean;
      isShimmercat?: boolean;
      connectionString?: string | null;
    };
    /**
     * Format: int32
     * @description 0 = Unknown, <br>1 = J1, <br>2 = J2, <br>3 = J3
     * @enum {integer}
     */
    ShopEdition: 0 | 1 | 2 | 3;
    /**
     * Format: int32
     * @description 0 = Unknown, <br>1 = Live, <br>2 = Closed, <br>3 = Production
     * @enum {integer}
     */
    ShopStatus: 0 | 1 | 2 | 3;
    /**
     * Format: int32
     * @description 0 = Unknown, <br>1 = Production, <br>2 = Test, <br>3 = Design, <br>4 = Staging
     * @enum {integer}
     */
    ShopType: 0 | 1 | 2 | 3 | 4;
    Site: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      iisId?: number;
      webServer?: components["schemas"]["EntityRef"];
      shop?: components["schemas"]["EntityRef"];
      name?: string | null;
      appPoolName?: string | null;
      appName?: string | null;
      physicalPath?: string | null;
      status?: components["schemas"]["SiteStatus"];
      redirectDestination?: string | null;
      bindings?: components["schemas"]["SiteBinding"][] | null;
    };
    SiteBinding: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      siteId?: number;
      host?: string | null;
      ipAddress?: string | null;
      /** Format: int32 */
      port?: number;
      protocol?: string | null;
    };
    /**
     * Format: int32
     * @description 0 = Starting, <br>1 = Started, <br>2 = Stopping, <br>3 = Stopped, <br>4 = Unknown
     * @enum {integer}
     */
    SiteStatus: 0 | 1 | 2 | 3 | 4;
  };
}

export interface operations {}

export interface external {}
